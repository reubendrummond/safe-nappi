{"version":3,"sources":["../src/index.ts","../src/plugin.ts"],"sourcesContent":["export {nappiPlugin} from \"./plugin\";\nexport type {InferResponse} from \"./inferResponse\";\nexport type {ApiResponse} from \"./ApiResponse\";\nexport * from \"./real-types\";\n","import {existsSync, mkdirSync, readdirSync, statSync, writeFileSync} from \"fs\";\nimport {posix} from \"path\";\nimport {NextConfig} from \"next\";\nimport {name} from \"../package.json\";\n\nfunction recursiveReaddir(base: string): string[] {\n    return readdirSync(base).flatMap(path => {\n        const joined = posix.join(base, path);\n        const stat = statSync(joined);\n        if (stat.isDirectory()) return recursiveReaddir(joined);\n        else return joined;\n    });\n}\n\nconst defaultBaseDirs = [\"src/pages/api\", \"pages/api\"];\n\nfunction getBaseDir() {\n    const def = defaultBaseDirs.find(path => existsSync(path));\n    if (def) return def;\n    throw new Error(\"Cannot find the API directory. Please specify it in the config.\");\n}\n\nfunction safifyIdentifier(from: string) {\n    return from.replace(/[^a-z0-9]+/gi, \"_\");\n}\n\nexport interface NappiPluginConfig {\n    baseDir?: string;\n    tsOut?: string;\n}\n\nfunction getApiUrl(path: string) {\n    const metadata = {\n        hasDynamicRoutes: false,\n        fullPathWithDynamic: \"\"\n    };\n\n    if (path.endsWith(\"/index\")) path = path.substring(0, path.length - \"/index\".length);\n\n    path = \"/api/\" + path;\n\n    metadata.fullPathWithDynamic = path;\n\n    path = path.replace(/\\[[^\\]]+]/g, () => {\n        metadata.hasDynamicRoutes = true;\n        return \"${string}\";\n    });\n\n    return {\n        fullPath: path,\n        metadata\n    };\n}\n\nfunction getApiPaths(path: string) {\n    const {fullPath} = getApiUrl(path);\n\n    return [\n        fullPath\n    ];\n}\n\nfunction getResponseType(path: string) {\n    const id = safifyIdentifier(path);\n    return `typeof ${id} extends NextApiHandler<infer NextResponse>\n  ? NextResponse\n  : typeof ${id} extends SafeNappiApiHandler<infer SnResponse, string>\n  ? SnResponse\n  : never`;\n}\n\nfunction inferQueryParams(path: string) {\n    const id = safifyIdentifier(path);\n    return `typeof ${id} extends SafeNappiApiHandler<any, infer QueryParams>\n  ? QueryParams\n  : never`;\n}\n\nexport function nappiPlugin(baseConfig: NextConfig, config: NappiPluginConfig = {}): NextConfig {\n    const {baseDir = getBaseDir(), tsOut = \"types/nappi.d.ts\"} = config;\n\n    const tsRelativeToApi = posix.relative(posix.dirname(tsOut), baseDir);\n\n    setInterval(() => {\n        const files = recursiveReaddir(baseDir)\n            .filter(file => file.endsWith(\".ts\") || file.endsWith(\".tsx\"))\n            .map(file => posix.relative(baseDir + \"/\", file))\n            .map(file => file.replace(/\\..+$/, \"\"));\n\n        const sourceFile = [\n            \"import { NextApiHandler } from \\\"next\\\";\",\n            ...files.map(path => `import type {default as ${safifyIdentifier(path)}} from \"${posix.join(tsRelativeToApi, path)}\";`),\n            `import {SafeNappiApiHandler} from \"${name}/dist/real-types\";`,\n            `declare module \"${name}\" {`,\n            `export * from \"${name}/dist/real-types\";`,\n            ...files.flatMap(path => getApiPaths(path).map(apiPath =>\n                `export function jsonFetch(path: \\`${apiPath}\\`, query?: (${inferQueryParams(path)}) extends never ? undefined : {[Key in ${inferQueryParams(path)}]?: string}): Promise<${getResponseType(path)}>;`\n            )),\n            \"export type ApiResponse<Path extends \",\n            files.flatMap(path => getApiPaths(path).map(apiPath => `\\`${apiPath}\\``)).join(\" | \"),\n            \"> =\",\n            ...files.flatMap(path => getApiPaths(path).map(apiPath => `Path extends \\`${apiPath}\\` ? ${getResponseType(path)} :`)),\n            \"never\",\n            \"}\"\n        ].join(\"\\n\");\n\n        mkdirSync(posix.dirname(tsOut), {recursive: true});\n        writeFileSync(tsOut, sourceFile);\n    }, 2000);\n\n    return baseConfig;\n}\n\n\n"],"mappings":"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","names":[]}